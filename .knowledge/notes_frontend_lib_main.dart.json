{"is_source_file": true, "format": "Dart", "description": "This file is the main source code for a Flutter-based note-taking application. It defines data models, database interaction, UI screens for listing, viewing, creating, and editing notes, as well as search functionality.", "external_files": ["package:flutter/material.dart", "package:path/path.dart", "package:sqflite/sqflite.dart", "dart:async"], "external_methods": ["getDatabasesPath()", "join()", "openDatabase()", "runApp()", "Navigator.of()", "showSearch()", "MaterialPageRoute()", "ScaffoldMessenger.of()", "SnackBar()", "setState()", "build()", "dispose()", "mounted", "runApp()"], "published": ["main", "Note", "NotesDatabase", "NotesHomeScreen", "NoteDetailScreen", "NoteEditScreen", "_NotesSearchDelegate"], "classes": [{"name": "Note", "description": "Model class representing a note with id, title, content, creation and update timestamps."}, {"name": "NotesDatabase", "description": "Singleton class handling database operations for notes, including CRUD and querying."}, {"name": "NotesHomeScreen", "description": "Main widget displaying list of notes with search, add, edit, delete functionality."}, {"name": "NoteDetailScreen", "description": "Screen showing detailed view of a single note with options to edit or delete."}, {"name": "NoteEditScreen", "description": "Screen for creating and editing notes with input validation."}, {"name": "_NotesSearchDelegate", "description": "Search delegate providing search UI and logic for notes filtering."}], "methods": [{"name": "main", "description": "Entry point of the application, runs the NoteEaseApp widget."}, {"name": "Note.fromMap", "description": "Factory constructor to create a Note instance from a map retrieved from the database."}, {"name": "Note.toMap", "description": "Converts a Note instance into a map for database storage."}, {"name": "NotesDatabase.database", "description": "Getter that initializes and returns the database instance."}, {"name": "NotesDatabase._initDB", "description": "Initializes the database with specified filename, creates tables if needed."}, {"name": "NotesDatabase._createDB", "description": "Executes SQL to create the notes table."}, {"name": "NotesDatabase.createNote", "description": "Inserts a new note into the database."}, {"name": "NotesDatabase.readNote", "description": "Retrieves a note by id from the database."}, {"name": "NotesDatabase.readAllNotes", "description": "Retrieves all notes, optionally filtered by a search query."}, {"name": "NotesDatabase.updateNote", "description": "Updates an existing note in the database."}, {"name": "NotesDatabase.deleteNote", "description": "Deletes a note by id from the database."}, {"name": "NotesDatabase.close", "description": "Closes the database connection."}, {"name": "main", "description": "Application entry point, runs the widget tree."}, {"name": "NotesHomeScreen.build", "description": "Builds the main UI showing list of notes, search, and add button."}, {"name": "_loadNotes", "description": "Fetches notes from database, optionally filtered by search query."}, {"name": "_onSearchChanged", "description": "Updates search query and reloads notes when search input changes."}, {"name": "_onNoteTap", "description": "Handles tapping on a note to view/edit details."}, {"name": "_onAddPressed", "description": "Handles pressing the add button to create a new note."}, {"name": "_onDeletePressed", "description": "Deletes a note and reloads the list."}, {"name": "_buildNoteCard", "description": "Builds a UI card widget representing a note."}, {"name": "NoteDetailScreen.build", "description": "Displays detailed view of a note with options to edit or delete."}, {"name": "_formatDate", "description": "Formats dates for display in the note detail view."}, {"name": "_onEdit", "description": "Navigates to the note editing screen from details."}, {"name": "_onDelete", "description": "Deletes the current note from database."}, {"name": "NoteEditScreen.build", "description": "Builds UI for creating or editing a note."}, {"name": "_onSaveNote", "description": "Saves the note to database, either by creating or updating."}, {"name": "_NotesSearchDelegate.buildSuggestions", "description": "Builds suggestions list based on current search query."}, {"name": "_NotesSearchDelegate.buildResults", "description": "Builds search results list based on query."}, {"name": "_NotesSearchDelegate._buildResultsList", "description": "Helper that fetches notes matching query and displays them."}], "search-terms": ["flutter", "notes", "database", "sqflite", "model class", "CRUD", "search", "UI screens", "note", "notes_app", "main.dart", "search delegate"], "state": 2, "file_id": 16, "knowledge_revision": 57, "git_revision": "", "revision_history": [{"39": ""}, {"40": ""}, {"41": ""}, {"42": ""}, {"44": ""}, {"45": ""}, {"46": ""}, {"47": ""}, {"48": ""}, {"49": ""}, {"50": ""}, {"51": ""}, {"52": ""}, {"53": ""}, {"54": ""}, {"55": ""}, {"56": ""}, {"57": ""}], "hash": "b667a4047d7f1567006968cd982fbf38", "format-version": 4, "code-base-name": "notes_frontend", "filename": "notes_frontend/lib/main.dart"}